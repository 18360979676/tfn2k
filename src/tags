Mdisc	disc.c	/^main (void)$/
Mmkpass	mkpass.c	/^main (void)$/
Mtd	td.c	/^int main (int argc, char **argv) {$/
Mtfn	tfn.c	/^main (int argc, char **argv)$/
aes_encrypt	cast.c	/^void aes_encrypt (const u4byte in_blk[4], u4byte o/
aes_setkey	aes.c	/^aes_setkey (char *password)$/
base64_in	base64.c	/^void base64_in (unsigned char *buf, char *obuf, in/
base64_out	base64.c	/^void base64_out (char *buf, unsigned char *obuf, i/
bswap	aes.h	/^#define bswap(x)    ((rotl(x, 8) & 0x00ff00ff) | (/
byte	aes.h	/^#define byte(x,n)   ((u1byte)((x) >> (8 * n)))$/
cksum	ip.c	/^cksum (u16 * buf, int nwords)$/
commence_icmp	process.c	/^commence_icmp (char *ip)$/
commence_mix	process.c	/^commence_mix (char *ip)$/
commence_smurf	process.c	/^commence_smurf (char *ip)$/
commence_syn	process.c	/^commence_syn (char *ip, int port)$/
commence_targa3	process.c	/^commence_targa3 (char *ip)$/
commence_udp	process.c	/^void commence_udp (char *ip) {$/
dbug	tribe.c	/^dbug (char *s)$/
decode	aes.c	/^decode (u1byte * inbuf, int len)$/
decode64	aes.c	/^decode64 (u1byte * inbuf, u1byte * outbuf, int len/
decrypt	cast.c	/^void decrypt (const u4byte in_blk[4], u4byte out_b/
encode	aes.c	/^encode (u1byte * inbuf, int len)$/
encode64	aes.c	/^encode64 (u1byte * inbuf, u1byte * outbuf, int len/
f1	cast.c	/^#define f1(y,x,kr,km)           \\$/
f2	cast.c	/^#define f2(y,x,kr,km)           \\$/
f3	cast.c	/^#define f3(y,x,kr,km)           \\$/
f_rnd	cast.c	/^#define f_rnd(x,n)                              \\/
get_block	aes.h	/^#define get_block(x)                            \\/
get_key	aes.h	/^#define get_key(x,len)                          \\/
getrandom	tribe.c	/^getrandom (int min, int max)$/
htonl	ip.h	/^#define htonl(x)        (x)$/
htons	ip.h	/^#define htons(x)        (x)$/
i_rnd	cast.c	/^#define i_rnd(x, n)                             \\/
icmp	flood.c	/^icmp (unsigned long lamer, unsigned long src)$/
io_swap	aes.h	/^#define io_swap(x)  bswap(x)$/
ip	ip.h	/^struct ip$/
ip_sum	ip.c	/^ip_sum (addr, len)$/
isip	ip.c	/^isip (char *ip)$/
k00lip	tribe.c	/^k00lip (void)$/
k_rnd	cast.c	/^#define k_rnd(k,tr,tm)          \\$/
must_kill_all	process.c	/^must_kill_all (void)$/
ntoa	ip.c	/^ntoa (u32 in)$/
ntohl	ip.h	/^#define ntohl(x)        (x)$/
ntohs	ip.h	/^#define ntohs(x)        (x)$/
passchk	tfn.c	/^passchk (void)$/
put_block	aes.h	/^#define put_block(x)                            \\/
random_init	tribe.c	/^random_init (void)$/
resolve	ip.c	/^resolve (char *host)$/
rotl	aes.h	/^#define rotl(x,n)   (((x) << ((int)(n))) | ((x) >>/
rotr	aes.h	/^#define rotr(x,n)   (((x) >> ((int)(n))) | ((x) <</
s16	ip.h	/^typedef short int s16;$/
s1byte	aes.h	/^typedef signed char s1byte;	\/* an 8 bit signed ch/
s2byte	aes.h	/^typedef signed short s2byte;	\/* a 16 bit signed i/
s32	ip.h	/^typedef int s32;$/
s4byte	aes.h	/^typedef signed long s4byte;	\/* a 32 bit signed in/
s8	ip.h	/^typedef char s8;$/
sa	ip.h	/^struct sa$/
set_key	cast.c	/^u4byte * set_key (const u4byte in_key[], const u4b/
shellsex	process.c	/^void shellsex (int port) {$/
su	ip.h	/^struct su$/
syn	flood.c	/^syn (unsigned long victim, unsigned short port)$/
targa3	flood.c	/^targa3 (unsigned long victim)$/
tcp	ip.h	/^struct tcp$/
tfn_sendto	tfn.c	/^tfn_sendto (unsigned long dst)$/
tfntransmit	tribe.c	/^tfntransmit (unsigned long from, unsigned long to,/
tribe	tribe.h	/^struct tribe$/
tribe_cmd	td.c	/^void tribe_cmd (char id, char *target, char **argp/
trimbuf	tribe.c	/^trimbuf (char *buf)$/
u16	ip.h	/^typedef unsigned short int u16;$/
u1byte	aes.h	/^typedef unsigned char u1byte;	\/* an 8 bit unsigne/
u2byte	aes.h	/^typedef unsigned short u2byte;	\/* a 16 bit unsign/
u32	ip.h	/^typedef unsigned int u32;$/
u4byte	aes.h	/^typedef unsigned long u4byte;	\/* a 32 bit unsigne/
u8	ip.h	/^typedef unsigned char u8;$/
udp	flood.c	/^udp (unsigned long lamer)$/
usage	tfn.c	/^usage (char *arg)$/
